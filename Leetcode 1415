class Solution {
public:
    void solve(int n, string &choose, vector<string>& ans, string &temp) {
        if (temp.length() == n) {
            ans.push_back(temp);
            return;
        }
        for (int i = 0; i < 3; i++) {
            if (temp.length() >= 1 && temp[temp.length() - 1] == choose[i]) {
                continue;
            }
            temp.push_back(choose[i]);
            solve(n, choose, ans, temp);
            temp.pop_back();
        }
    }

    string getHappyString(int n, int k) {
        string choose = "abc";
        vector<string> ans;
        string temp = "";
        solve(n, choose, ans, temp);

        // Print all generated happy strings
        for (auto &i : ans) {
            cout << i << " ";
        }
        cout << endl;

        // Return the k-th lexicographical happy string
        return (k <= ans.size()) ? ans[k - 1] : "";
    }
};
